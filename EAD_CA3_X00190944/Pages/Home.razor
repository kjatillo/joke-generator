@page "/"

@inject HttpClient Http
@inject ILogger<Home> Logger

<PageTitle>Joke Generator | X00190944</PageTitle>

<div class="container border border-success rounded p-5 my-3" id="main">
	<img src="images/pepe_ok.png"
		 alt="Pepe Meme"
		 class="d-block mx-auto bg-success"
		 style="height: 75px;" />

	<h1 class="text-center mb-5 display-4 text-success">Joke Generator</h1>

	<!-- Category Checkbox -->
	<div class="mb-3">
		<h6>Select Categories</h6>
		<div class="d-flex flex-wrap gap-3 flex-column flex-md-row">
			@foreach (Category category in Enum.GetValues(typeof(Category)))
			{
				if (category != Category.Any)
				{
					<div class="form-check form-check-inline">
						<input class="form-check-input"
							   type="checkbox"
							   @bind="selectedCategories[category]" />
						<label class="form-check-label">@category</label>
					</div>
				}
			}
		</div>
	</div>

	<!-- Language Dropdown -->
	<div class="mb-3">
		<h6>Select Language</h6>
		<div class="row">
			<div class="col-12 col-md-6">
				<select class="form-select" @bind="selectedLanguage">
					@foreach (Language language in Enum.GetValues(typeof(Language)))
					{
						<option value="@language">
							@UtilityMethods.GetLanguageDisplayName(language)
						</option>
					}
				</select>
			</div>
		</div>
	</div>

	<!-- Joke Type Dropdown -->
	<div class="mb-3">
		<h6>Select Type</h6>
		<div class="row">
			<div class="col-12 col-md-6">
				<select class="form-select" @bind="selectedJokeType">
					@foreach (JokeType jokeType in Enum.GetValues(typeof(JokeType)))
					{
						<option value="@jokeType">@jokeType</option>
					}
				</select>
			</div>
		</div>
	</div>

	<!-- Search Bar -->
	<div class="mb-3">
		<h6>Search</h6>
		<div class="row">
			<div class="col-12 col-md-6">
				<input class="form-control"
					   type="text"
					   placeholder="Enter search term(s)"
					   @bind="searchQuery"
					   @onkeydown="@(async e =>
							await UtilityMethods
									.TriggerGenerateJoke(e, GenerateJokeAsync))" />
			</div>
		</div>
	</div>

	<!-- Quantity -->
	<div class="mb-3">
		<h6>Quantity</h6>
		<div class="row">
			<div class="col-12 col-md-3">
				<input class="form-control"
					   type="number"
					   @bind="quantity"
					   min="@MIN_QTY"
					   max="@MAX_QTY" />
			</div>
		</div>
	</div>

	<!-- Generate Joke Button -->
	<div class="d-grid gap-2 d-md-block">
		<button class="btn btn-success me-2" @onclick="GenerateJokeAsync">
			Generate Joke
		</button>

		<button class="btn btn-secondary" @onclick="ClearForm">
			Clear Form
		</button>
	</div>

	<!-- Joke Output with QuickGrid -->
	@if (jokes.Any())
	{
		<hr class="mt-4 mb-2" />

		<div class="table-responsive">
			<QuickGrid Items="jokes.AsQueryable()"
					   Pagination="@pagination"
					   class="table table-striped table-hover">
				<PropertyColumn Property="@(j => j.Category)"
								Title="Category"
								Sortable="true" />
				<PropertyColumn Property="@(j => j.Type)"
								Title="Type"
								Sortable="true" />
				<PropertyColumn Property="@(j =>
									j.Type == JokeType.TwoPart.ToString().ToLower() ?
													$"{j.Setup} - {j.Delivery}" : j.Joke)"
								Title="Joke"
								Sortable="true" />
			</QuickGrid>
		</div>

		<Paginator State="@pagination" />
	}
	else if (noJokesFound)
	{
		<div class="text-center mt-4">
			<img src="images/pepe_sad.jpg"
				 alt="No Jokes Found"
				 class="d-block mx-auto"
				 style="height: 125px;" />

			<p class="alert alert-warning">Sorry, no jokes found</p>
		</div>
	}
</div>

@code {
	// Fields
	private const int MIN_QTY = 1;
	private const int MAX_QTY = 10;

	private int quantity = MIN_QTY;
	private bool noJokesFound = false;
	private string searchQuery = string.Empty;
	private JokeType selectedJokeType = JokeType.Any;
	private Language selectedLanguage = Language.EN;
	private List<JokeResponse> jokes = new List<JokeResponse>();
	private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

	private Dictionary<Category, bool> selectedCategories = Enum.GetValues(typeof(Category))
		.Cast<Category>()
		.ToDictionary(category => category, category => false);

	// Generate Joke Method
	private async Task GenerateJokeAsync()
	{
		try
		{
			string url = "https://v2.jokeapi.dev/joke/";

			// Category
			var selectedCategoriesString = string.Join(",", selectedCategories
					.Where(c => c.Value)
					.Select(c => c.Key.ToString()));

			if (string.IsNullOrEmpty(selectedCategoriesString))
			{
				selectedCategoriesString = Category.Any.ToString();
			}

			// Blacklist
			var blacklistFlags = string.Join(",", Enum.GetValues(typeof(Blacklist))
				.Cast<Blacklist>()
				.Select(flag => flag.ToString().ToLower()));

			url += $"{selectedCategoriesString}?lang={selectedLanguage.ToString().ToLower()}";
			url += $"&blacklistFlags={blacklistFlags}";

			// Joke Type
			if (selectedJokeType != JokeType.Any)
			{
				url += $"&type={selectedJokeType.ToString().ToLower()}";
			}

			// Search
			if (!string.IsNullOrEmpty(searchQuery))
			{
				var encodedQuery = Uri.EscapeDataString(searchQuery);
				url += $"&contains={encodedQuery}";
			}

			// Quantity
			if (quantity < MIN_QTY)
			{
				quantity = MIN_QTY;
			}
			else if (quantity > MAX_QTY)
			{
				quantity = MAX_QTY;
			}

			url += $"&amount={quantity}";

			// Output
			if (quantity == MIN_QTY)
			{
				JokeResponse? response = await Http.GetFromJsonAsync<JokeResponse>(url);
				if (response != null)
				{
					jokes = new List<JokeResponse> { response };
				}
				else
				{
					throw new InvalidOperationException("Joke response is null.");
				}
			}
			else
			{
				MultipleJokeResponse? response = await Http.GetFromJsonAsync<MultipleJokeResponse>(url);
				if (response != null)
				{
					jokes = response.Jokes;
				}
				else
				{
					throw new InvalidOperationException("Error: Joke response is null.");
				}
			}

			if (!jokes.Any())
			{
				noJokesFound = true;
			}

			StateHasChanged();
		}
		catch (HttpRequestException httpEx)
		{
			Logger.LogError(httpEx, "Error fetching joke: {Message}", httpEx.Message);
			jokes.Clear();
			noJokesFound = true;
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "An unexpected error occurred: {Message}", ex.Message);
			jokes.Clear();
			noJokesFound = true;
		}
	}

	private void ClearForm()
	{
		jokes.Clear();
		quantity = MIN_QTY;
		noJokesFound = false;
		searchQuery = string.Empty;
		selectedJokeType = JokeType.Any;
		selectedLanguage = Language.EN;
		selectedCategories = Enum.GetValues(typeof(Category))
			.Cast<Category>()
			.ToDictionary(category => category, category => false);
	}
}
