@page "/"

@inject HttpClient Http
@inject ILogger<Home> Logger

<PageTitle>Joke Generator | X00190944</PageTitle>

<h1>Joke Generator</h1>

<!-- Category Checkbox -->
<div>
	<h3>Select Categories</h3>
	@foreach (Category category in Enum.GetValues(typeof(Category)))
	{
		if (category != Category.Any)
		{
			<div>
				<input type="checkbox" @bind="selectedCategories[category]" /> @category
			</div>
		}
	}
</div>

<!-- Language Dropdown -->
<div>
	<h3>Select Language</h3>
	<select @bind="selectedLanguage">
		@foreach (Language language in Enum.GetValues(typeof(Language)))
		{
			<option value="@language">@UtilityMethods.GetLanguageDisplayName(language)</option>
		}
	</select>
</div>

<!-- Joke Type Dropdown -->
<div>
	<h3>Select Joke Type</h3>
	<select @bind="selectedJokeType">
		@foreach (JokeType jokeType in Enum.GetValues(typeof(JokeType)))
		{
			<option value="@jokeType">@jokeType</option>
		}
	</select>
</div>

<!-- Search Bar -->
<div>
	<h3>Search</h3>
	<input type="text"
     placeholder="Enter search term(s)"
     @bind="searchQuery"
     @onkeydown="@(e => UtilityMethods.TriggerGenerateJoke(e, GenerateJokeAsync))" />
</div>

<!-- Quantity -->
<div>
	<h3>Quantity of Jokes</h3>
	<input type="number" @bind="quantity" min="@MIN_QTY" max="@MAX_QTY" />
</div>

<!-- Generate Joke Button -->
<button @onclick="GenerateJokeAsync">Generate Joke</button>

<!-- Joke Output with QuickGrid -->
@if (jokes.Any())
{
	<QuickGrid Items="jokes.AsQueryable()" RowsPerPage="5" TGridItem="JokeResponse">
		<PropertyColumn Property="@(j => j.Category)" Title="Category" Sortable="true" />
		<PropertyColumn Property="@(j => j.Type)" Title="Type" Sortable="true" />
        <PropertyColumn Property="@(j => j.Type == JokeType.TwoPart.ToString().ToLower() ? 
			$"{j.Setup} - {j.Delivery}" : j.Joke)" Title="Joke" Sortable="true" />
	</QuickGrid>
}

@code {
	// Fields
	private const int MIN_QTY = 1;
	private const int MAX_QTY = 10;

	private Dictionary<Category, bool> selectedCategories = Enum.GetValues(typeof(Category))
		.Cast<Category>()
		.ToDictionary(category => category, category => false);

	private int quantity = MIN_QTY;
	private string searchQuery = string.Empty;
	private JokeType selectedJokeType = JokeType.Any;
	private Language selectedLanguage = Language.EN;
	private List<JokeResponse> jokes = new List<JokeResponse>();

	// Generate Joke Method
	private async Task GenerateJokeAsync()
	{
		try
		{
			string url = "https://v2.jokeapi.dev/joke/";

			// Category
			var selectedCategoriesString = string.Join(",", selectedCategories
					.Where(c => c.Value)
					.Select(c => c.Key.ToString()));

			if (string.IsNullOrEmpty(selectedCategoriesString))
			{
				selectedCategoriesString = Category.Any.ToString();
			}

			// Blacklist
			var blacklistFlags = string.Join(",", Enum.GetValues(typeof(Blacklist))
				.Cast<Blacklist>()
				.Select(flag => flag.ToString().ToLower()));

			url += $"{selectedCategoriesString}?lang={selectedLanguage.ToString().ToLower()}";
			url += $"&blacklistFlags={blacklistFlags}";

			// Joke Type
			if (selectedJokeType != JokeType.Any)
			{
				url += $"&type={selectedJokeType.ToString().ToLower()}";
			}

			// Search
			if (!string.IsNullOrEmpty(searchQuery))
			{
				var encodedQuery = Uri.EscapeDataString(searchQuery);
				url += $"&contains={encodedQuery}";
			}

			// Quantity
			if (quantity > MIN_QTY && quantity <= MAX_QTY)
			{
				url += $"&amount={quantity}";
			}

			// Output
			if (quantity == MIN_QTY)
			{
				JokeResponse? response = await Http.GetFromJsonAsync<JokeResponse>(url);
				if (response != null)
				{
					jokes = new List<JokeResponse> { response };
				}
				else
				{
					throw new InvalidOperationException("Joke response is null.");
				}
			}
			else
			{
				MultipleJokeResponse? response = await Http.GetFromJsonAsync<MultipleJokeResponse>(url);
				if (response != null)
				{
					jokes = response.Jokes;
				}
				else
				{
					throw new InvalidOperationException("Error: Joke response is null.");
				}
			}
		}
		catch (HttpRequestException httpEx)
		{
			Logger.LogError(httpEx, "Error fetching joke: {Message}", httpEx.Message);
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "An unexpected error occurred: {Message}", ex.Message);
		}
	}
}
