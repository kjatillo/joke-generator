@page "/"

@inject HttpClient Http
@inject ILogger<Home> Logger

@using EAD_CA3_X00190944.Enums;

<PageTitle>Joke Generator | X00190944</PageTitle>

<h1>Joke Generator</h1>

<!-- Category Checkbox -->
<div>
	<h3>Select Categories</h3>
	@foreach (Category category in Enum.GetValues(typeof(Category)))
	{
		if (category != Category.Any)
		{
			<div>
				<input type="checkbox" @bind="selectedCategories[category]" /> @category
			</div>
		}
	}
</div>

<!-- Language Dropdown -->
<div>
	<h3>Select Language</h3>
	<select @bind="selectedLanguage">
		@foreach (Language language in Enum.GetValues(typeof(Language)))
		{
			<option value="@language">@GetLanguageDisplayName(language)</option>
		}
	</select>
</div>

<!-- Joke Type Dropdown -->
<div>
	<h3>Select Joke Type</h3>
	<select @bind="selectedJokeType">
		@foreach (JokeType jokeType in Enum.GetValues(typeof(JokeType)))
		{
			<option value="@jokeType">@jokeType</option>
		}
	</select>
</div>

<!-- Search Bar -->
<div>
	<h3>Search</h3>
	<input type="text"
		   placeholder="Enter search term(s)"
		   @bind="searchQuery"
		   @onkeydown="TriggerGenerateJoke" />
</div>

<!-- Generate Joke Button -->
<button @onclick="GenerateJokeAsync">Generate Joke</button>

<!-- Joke Output -->
@if (!string.IsNullOrEmpty(result))
{
	<div>
		<h3>Joke</h3>
		<p>@result</p>
	</div>
	<div>
		<h3>URL</h3>
		<p>@url</p>
	</div>
}

@code {
	// Class
	private class JokeResponse
	{
		public string Type { get; set; } = string.Empty;
		public string Joke { get; set; } = string.Empty;
		public string Setup { get; set; } = string.Empty;
		public string Delivery { get; set; } = string.Empty;
	}

	// Fields
	private Dictionary<Category, bool> selectedCategories = Enum.GetValues(typeof(Category))
		.Cast<Category>()
		.ToDictionary(category => category, category => false);

	private Language selectedLanguage = Language.EN;
	private JokeType selectedJokeType = JokeType.Any;
	private string searchQuery = string.Empty;
	private string result = string.Empty;
	private string url = string.Empty;

	// Methods
	private async Task GenerateJokeAsync()
	{
		try
		{
			url = "https://v2.jokeapi.dev/joke/";

			var selectedCategoriesString = string.Join(",", selectedCategories
					.Where(c => c.Value)
					.Select(c => c.Key.ToString()));

			if (string.IsNullOrEmpty(selectedCategoriesString))
			{
				selectedCategoriesString = Category.Any.ToString();
			}

			var blacklistFlags = string.Join(",", Enum.GetValues(typeof(Blacklist))
				.Cast<Blacklist>()
				.Select(flag => flag.ToString().ToLower()));

			url += $"{selectedCategoriesString}?lang={selectedLanguage.ToString().ToLower()}";
			url += $"&blacklistFlags={blacklistFlags}";

			if (selectedJokeType != JokeType.Any)
			{
				url += $"&type={selectedJokeType.ToString().ToLower()}";
			}

			if (!string.IsNullOrEmpty(searchQuery))
			{
				var encodedQuery = Uri.EscapeDataString(searchQuery);
				url += $"&contains={encodedQuery}";
			}

			JokeResponse? response = await Http.GetFromJsonAsync<JokeResponse>(url);
			if (response != null)
			{
				result = response.Type == JokeType.Single.ToString().ToLower() ?
					response.Joke : $"{response.Setup} - {response.Delivery}";
			}
			else
			{
				throw new InvalidOperationException("Joke response is null.");
			}
		}
		catch (HttpRequestException httpEx)
		{
			result = "Error fetching joke.";
			Logger.LogError(httpEx, $"{result}: {httpEx.Message}");
		}
		catch (Exception ex)
		{
			result = "An unexpected error occurred.";
			Logger.LogError(ex, $"{result}: {ex.Message}");
		}
	}

	private async Task TriggerGenerateJoke(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			await Task.Delay(1);  // Ensure the search query binding is updated
			await GenerateJokeAsync();
		}
	}

	private string GetLanguageDisplayName(Language language)
	{
		return language switch
		{
			Language.EN => "English",
			Language.CS => "Czech",
			Language.FR => "French",
			Language.DE => "German",
			Language.PT => "Portuguese",
			Language.ES => "Spanish",
			_ => "Unknown"
		};
	}
}
